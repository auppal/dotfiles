#! perl

=head1 NAME

52-osc - Implement OSC 32 ; Interact with X11 clipboard

=head1 SYNOPSIS

   urxvt -pe 52-osc

=head1 DESCRIPTION

This extension implements OSC 52 for interacting with system clipboard

Original source:
https://github.com/parantapa/dotfiles/blob/master/urxvt-perl/52-osc

Based on:
http://ailin.tucana.uberspace.de/static/nei/*/Code/urxvt/

Modified by Ahsen Uppal with fixes.

=cut

use MIME::Base64;
use Encode;

# xclip -o can stall on paste if the internal selection was used
# to set the clipboard, and we try to paste from the same clipboard.
# The workaround is to use different clipboard indexes for copying and pasting.
# I have an external program that syncs these anyway.

# Internally, urxvt uses idx 0 for the selection.
# If you want to use idx 1 to copy and 0 to paste you will have to 
# override the default on_sel_grab.
#
my $copy_clip_idx = 0;

#sub on_sel_grab {
#    my ($self, $time) = @_;
#    $self->selection($self->selection, $copy_clip_idx);
#    $self->selection_grab(urxvt::CurrentTime, $copy_clip_idx);
#}

sub on_osc_seq {
    my ($term, $op, $args) = @_;
    return () unless $op eq 52;

    my ($clip, $data) = split ';', $args, 2;

    if ($data eq '?') {
        my $data_free = `xclip -o -selection clipboard`;
        $term->tt_write("\e]52;$clip;".encode_base64($data_free, '')."\a");
    }
    else {
        my $data_decoded = decode_base64($data);
        # warn "copy to clipboard: $data_decoded";

 
        $term->selection($data_decoded, $copy_clip_idx);
        $term->selection_grab(urxvt::CurrentTime, $copy_clip_idx);

        # Using xclip for copying also prevents the bug, but at the expense of an additional fork.
        #`echo $data_decoded | xclip -i`;
    }

    ()
}
